const information = [];

const testData = [	//
	{label: "house", value:3},
	{label: "hospital", value:2},
	{label: "factory", value:1},
	{label: "windGen", value:1},
	{label: "sunGen", value:3},
];

const testForecast = {
	sun: [],
	wind: []
	hospital: []
		
};

const testResult = [	//Типа 4 ветки электросети
	{},
	{},
	{},
	{},
];

export function getTopology(testData) {
	//Тут что-то делать
  
	//Для начала пускай просто раскидывает объекты по веткам, согласно правилам. По возможности, использует все ветки.
	//Из словаря с количеством объектов создать 2 списка, где каждый объект хранится отдельно - отдельно для генераторов и потребителей.
	//Т.К. ветки всего 4, необходимо раздельно раскидать по ним приёмники и генераторы так, чтобы суммарная мощность на каждой ветке была минимальной.
	//Для этого:
	
	//(Вариант без учёта подстанции)
	//Расчитаем суммарную мощность для всех потребителей и производителей
	//Делить напряжение лучше всего поровну, что оставляет всего три варианта деления напряжения между приёмниками и производителями:
		//1:3, 2:2 и 3:1 (соотношение линий)
	//uP - мощность потребителей
	//uG - мощность генераторов
	//(А если учитывать подстанцию???)
	//Тогда можно сбалансить бОльшую часть мощности за подстанцией, а остальное раскидать поровну на оставшиеся две ветки.
	//Тогда сравниваем генераторы и потребителей.
	//if uP > uG then подключаем тупо ВСЕ генераторы за подстанцией, балансим их потребителями и раскидываем остальных потребителей поровну по остальным веткам.
	//if uP ~~ uG then подключаем всех за подстанцией и всё
	//else см. парой строк выше, но с генераторами вместо потребителей
	
	//Посчитать средние показатели затрат и генерации для каждого здания отдельно
	//С
  
}

